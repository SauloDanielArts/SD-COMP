package simuladorpd;

import java.awt.HeadlessException;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Saulo Daniel
 */
public class MainJFrame extends javax.swing.JFrame {

    //variavel principal do computador virtual
    private static COMP comp;
    private static String[] MEMORIA_TEMP;
    String compFile = "";

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();

        comp = new COMP(100);
        
        limparTabelas();
        this.Reiniciar_Button.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Caregar_Arquivo_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Registradores_Table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Pilha_Table = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        Registradores_da_UC_Table = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Memoria_Table = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        Limpar_Memoria_Button = new javax.swing.JButton();
        Proximo_Passo_Button = new javax.swing.JButton();
        Reiniciar_Button = new javax.swing.JButton();
        Debug_Label = new javax.swing.JLabel();
        Salvar_Arquivo_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Caregar_Arquivo_Button.setText("Caregar Arquivo");
        Caregar_Arquivo_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Caregar_Arquivo_ButtonMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("SD-COMP v0.01");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Registradores_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", null},
                {"B", null},
                {"C", null}
            },
            new String [] {
                "REGISTRADORES", "CONTEUDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registradores_Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(Registradores_Table);
        if (Registradores_Table.getColumnModel().getColumnCount() > 0) {
            Registradores_Table.getColumnModel().getColumn(0).setMinWidth(130);
            Registradores_Table.getColumnModel().getColumn(0).setPreferredWidth(130);
            Registradores_Table.getColumnModel().getColumn(0).setMaxWidth(130);
        }

        Pilha_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"P0", null},
                {"P1", null}
            },
            new String [] {
                "PILHA", "CONTEUDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Pilha_Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Pilha_Table);
        if (Pilha_Table.getColumnModel().getColumnCount() > 0) {
            Pilha_Table.getColumnModel().getColumn(0).setMinWidth(100);
            Pilha_Table.getColumnModel().getColumn(0).setPreferredWidth(100);
            Pilha_Table.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        Registradores_da_UC_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"PC", null},
                {"IR", null},
                {"MAR", null},
                {"MBR", null}
            },
            new String [] {
                "REGISTRADORES DA UC", "CONTEUDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Registradores_da_UC_Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(Registradores_da_UC_Table);
        if (Registradores_da_UC_Table.getColumnModel().getColumnCount() > 0) {
            Registradores_da_UC_Table.getColumnModel().getColumn(0).setMinWidth(180);
            Registradores_da_UC_Table.getColumnModel().getColumn(0).setPreferredWidth(180);
            Registradores_da_UC_Table.getColumnModel().getColumn(0).setMaxWidth(180);
        }

        Memoria_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "MEMORIA", "CONTEUDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Memoria_Table.getTableHeader().setReorderingAllowed(false);
        Memoria_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Memoria_TableMousePressed(evt);
            }
        });
        Memoria_Table.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                Memoria_TableInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane1.setViewportView(Memoria_Table);
        if (Memoria_Table.getColumnModel().getColumnCount() > 0) {
            Memoria_Table.getColumnModel().getColumn(0).setMinWidth(100);
            Memoria_Table.getColumnModel().getColumn(0).setPreferredWidth(100);
            Memoria_Table.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        Limpar_Memoria_Button.setText("Limpar Memoria");
        Limpar_Memoria_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Limpar_Memoria_ButtonMouseClicked(evt);
            }
        });

        Proximo_Passo_Button.setText("Proximo Passo ->");
        Proximo_Passo_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Proximo_Passo_ButtonActionPerformed(evt);
            }
        });

        Reiniciar_Button.setText("Reiniciar []");
        Reiniciar_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Reiniciar_ButtonMouseClicked(evt);
            }
        });

        Debug_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Debug_Label.setText("...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Proximo_Passo_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Reiniciar_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jSeparator1)
                            .addComponent(jScrollPane4)
                            .addComponent(Debug_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Limpar_Memoria_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Proximo_Passo_Button)
                            .addComponent(Reiniciar_Button))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Debug_Label)
                        .addGap(0, 39, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Limpar_Memoria_Button)
                .addContainerGap())
        );

        Salvar_Arquivo_Button.setText("Salvar Arquivo");
        Salvar_Arquivo_Button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Salvar_Arquivo_ButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Caregar_Arquivo_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Salvar_Arquivo_Button)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Caregar_Arquivo_Button)
                    .addComponent(Salvar_Arquivo_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 938, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void atualizarTabelas() {
        for (int i = 0; i < comp.MEMORIA_SIZE(); i++) {
            this.Memoria_Table.setValueAt(i, i, 0);
            this.Memoria_Table.setValueAt(comp.getDADO_MEMORIA(i), i, 1);
        }

        this.Memoria_Table.requestFocus();
        this.Memoria_Table.setRowSelectionInterval(comp.getMAR(), comp.getMAR());

        this.Pilha_Table.setValueAt(comp.getDADO_PILHA(0), 0, 1);
        this.Pilha_Table.setValueAt(comp.getDADO_PILHA(1), 1, 1);

        this.Registradores_Table.setValueAt(comp.getA(), 0, 1);
        this.Registradores_Table.setValueAt(comp.getB(), 1, 1);
        this.Registradores_Table.setValueAt(comp.getC(), 2, 1);

        this.Registradores_da_UC_Table.setValueAt(comp.getPC(), 0, 1);
        this.Registradores_da_UC_Table.setValueAt(comp.getIR(), 1, 1);
        this.Registradores_da_UC_Table.setValueAt(comp.getMAR(), 2, 1);
        this.Registradores_da_UC_Table.setValueAt(comp.getMBR(), 3, 1);

        this.Debug_Label.setText("...");

    }


    private void Proximo_Passo_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Proximo_Passo_ButtonActionPerformed

        if (comp.getMAR() == 0) {
            MEMORIA_TEMP = new String[comp.MEMORIA_SIZE()];

            for (int i = 0; i < MEMORIA_TEMP.length; i++) {
                MEMORIA_TEMP[i] = comp.getDADO_MEMORIA(i);
            }

            this.Reiniciar_Button.setEnabled(true);
        }

        comp.updateState();
        atualizarTabelas();

        if (comp.checkErro() == true || comp.getEND() == true) {
            this.Proximo_Passo_Button.setEnabled(false);
        }

        if (comp.checkErro() == true) {
            this.Debug_Label.setText("Alerta! - Erro na linha " + comp.getMAR());
        }

    }//GEN-LAST:event_Proximo_Passo_ButtonActionPerformed

    private void Memoria_TableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Memoria_TableMousePressed

        //quando a tabela de memoria e atualizada carega dos dadso a o computador
        if (this.Memoria_Table != null) 
        {
            for (int i = 0; i < comp.MEMORIA_SIZE(); i++) {
                comp.setDADO_MEMORIA(i, this.Memoria_Table.getValueAt(i, 1).toString());
            }
        }
    }//GEN-LAST:event_Memoria_TableMousePressed

    private void Limpar_Memoria_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Limpar_Memoria_ButtonMouseClicked

        //limpa as tabelas
        reiniciar();
        comp.clear();
        limparTabelas();

        for (int i = 0; i < comp.MEMORIA_SIZE(); i++) {
            comp.setDADO_MEMORIA(i, "");
        }
    }//GEN-LAST:event_Limpar_Memoria_ButtonMouseClicked

    private void limparTabelas() {
        comp.clear();

        if (MEMORIA_TEMP != null) {
            for (int i = 0; i < MEMORIA_TEMP.length; i++) {
                comp.setDADO_MEMORIA(i, MEMORIA_TEMP[i]);
            }
        }

        for (int i = 0; i < comp.MEMORIA_SIZE(); i++) {
            this.Memoria_Table.setValueAt(i, i, 0);
            this.Memoria_Table.setValueAt("", i, 1);
        }

        this.Pilha_Table.setValueAt("0.0", 0, 1);
        this.Pilha_Table.setValueAt("0.0", 1, 1);

        this.Registradores_Table.setValueAt("0.0", 0, 1);
        this.Registradores_Table.setValueAt("0.0", 1, 1);
        this.Registradores_Table.setValueAt("0.0", 2, 1);

        this.Registradores_da_UC_Table.setValueAt("0.0", 0, 1);
        this.Registradores_da_UC_Table.setValueAt("", 1, 1);
        this.Registradores_da_UC_Table.setValueAt("0.0", 2, 1);
        this.Registradores_da_UC_Table.setValueAt("", 3, 1);

        this.Debug_Label.setText("...");
    }


    private void Reiniciar_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Reiniciar_ButtonMouseClicked

        reiniciar();

    }//GEN-LAST:event_Reiniciar_ButtonMouseClicked

    private void Salvar_Arquivo_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Salvar_Arquivo_ButtonMouseClicked

    //salva o codico escrito em um arquivo ".comp"
        
    JFileChooser chooser = new JFileChooser();
    
    int retrival = chooser.showSaveDialog(null);
    if (retrival == JFileChooser.APPROVE_OPTION) {
        try {
          
            try (FileWriter fw = new FileWriter(chooser.getSelectedFile()+".comp")) 
            {
                for(int i=0;i<comp.MEMORIA_SIZE();i++)
                {
                    fw.write(comp.getDADO_MEMORIA(i)+"\n");
                } 
            }
          
        } catch (Exception ex) {
        }
    }
    
    }//GEN-LAST:event_Salvar_Arquivo_ButtonMouseClicked

    private void Memoria_TableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_Memoria_TableInputMethodTextChanged
        
        //quando a tabela de memoria e atualizada carega dos dadso a o computador
        if (this.Memoria_Table != null) 
        {
            for (int i = 0; i < comp.MEMORIA_SIZE(); i++) {
                comp.setDADO_MEMORIA(i, this.Memoria_Table.getValueAt(i, 1).toString());
            }
        }
    }//GEN-LAST:event_Memoria_TableInputMethodTextChanged

    private void Caregar_Arquivo_ButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Caregar_Arquivo_ButtonMouseClicked
        
          try
          {
        
            //Create a file chooser
            final JFileChooser fc = new JFileChooser();

            //In response to a button click:
            int returnVal = fc.showOpenDialog(this);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
                
            File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            System.out.println("Opening: " + file.getName() );
            System.out.println(file.getCanonicalPath());
            
            compFile = file.getCanonicalPath();
            
            Stream<String> stream = Files.lines(Paths.get(compFile)); 
            
            Object[] lines = stream.toArray();
           
            if(lines.length>0)
            { 
             //quando a tabela de memoria e atualizada carega dos dadso a o computador
             if (this.Memoria_Table != null) 
             {
              for (int i = 0; i < lines.length; i++) 
              {
                comp.setDADO_MEMORIA(i, lines[i].toString());
              }
             } 
             
             atualizarTabelas();
            }
            else
            {
              JOptionPane.showMessageDialog(this,"O arquvo esta vasio.","Ateção.", JOptionPane.WARNING_MESSAGE);
            }
            
            this.setAlwaysOnTop(true);
        
            }
        }
        catch(HeadlessException | IOException | SecurityException e)
        {
            JOptionPane.showMessageDialog(this,"O arquvo não pode ser lido.","Ateção.", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_Caregar_Arquivo_ButtonMouseClicked

    private void reiniciar() {
             //volta para o topo da tabela e reinicias variavais para o estado original

        comp.clear();

        if (MEMORIA_TEMP != null) {
            for (int i = 0; i < MEMORIA_TEMP.length; i++) {
                comp.setDADO_MEMORIA(i, MEMORIA_TEMP[i]);
            }
        }

        atualizarTabelas();

        this.Proximo_Passo_Button.setEnabled(true);
        this.Reiniciar_Button.setEnabled(false);

        this.Debug_Label.setText("...");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainJFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Caregar_Arquivo_Button;
    private javax.swing.JLabel Debug_Label;
    private javax.swing.JButton Limpar_Memoria_Button;
    private javax.swing.JTable Memoria_Table;
    private javax.swing.JTable Pilha_Table;
    private javax.swing.JButton Proximo_Passo_Button;
    private javax.swing.JTable Registradores_Table;
    private javax.swing.JTable Registradores_da_UC_Table;
    private javax.swing.JButton Reiniciar_Button;
    private javax.swing.JButton Salvar_Arquivo_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
